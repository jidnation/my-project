import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:my_project/Models/json_formatter.dart';
import 'package:my_project/file_manager.dart';

class FileController extends ChangeNotifier {
  List<User> _userList = <User>[];
  get users => _userList;

  // User _user = User(userName: 'JidNation1', password: '12345678');
  // User get user => _user;

  readUser() async {
    // _userList.add(User.fromJson(await FileManager().readJsonFile()));
    print('from controller: ${_userList.length}');
    notifyListeners();

    // print('from controller: ${_userList[0].userName}');
    // if (_userList.length > 1) {
    //   print('from controller: ${_userList[1].password}');
    // }
    // // return null;
  }

  writeUser(User newUser) async {
    _userList = (await FileManager().writeJsonFile(newUser));
    notifyListeners();
    // _userList.add(newUser);
    // print('fromControllerWritter: ${_userList.length}');
    // print(UserList.fromJson(_userList)); //Trying to convert it to string
    // print(_userList[1].userName);
  }
}





  // Positioned(
        //   top: 0,
        //   right: 0,
        //   child: Container(
        //     padding: const EdgeInsets.all(2),
        //     width: 18,
        //     height: 18,
        //     decoration: BoxDecoration(
        //       color: Colors.red.shade700,
        //       borderRadius: BorderRadius.circular(50),
        //     ),
        //     child: const Center(
        //       child: Text('10',
        //           style: TextStyle(
        //               color: Colors.white,
        //               fontSize: 10,
        //               fontFamily: 'Lobster',
        //               fontWeight: FontWeight.bold)),
        //     ),
        //   ),
        // ),

 SafeArea(
        child: SingleChildScrollView(
          child: Column(
            children: [
              FutureBuilder(
                future: _fetchers.dataFetcher(),
                builder: (context, AsyncSnapshot snapshot) {
                  int startingIndex = _fetchers._startingIndex;
                  if (snapshot.hasData) {
                    return SizedBox(
                      height: double.parse('${ snapshot.data.length}') * 160,
                      child: Container(
                        color:Colors.red, 
                        margin: const EdgeInsets.all(10),
                      child:  Container(
        padding: const EdgeInsets.all(5),
        width: MediaQuery.of(context).size.width,
        height: 10,
        decoration: BoxDecoration(
              color: Colors.grey.shade100,
              borderRadius: BorderRadius.circular(5),
              boxShadow: [
                BoxShadow(
                    color: Colors.grey.shade300, offset: const Offset(1, 1)),
                BoxShadow(
                    color: Colors.grey.shade400, offset: const Offset(0, 1)),
                BoxShadow(
                    color: Colors.grey.shade400, offset: const Offset(1, 0)),
                BoxShadow(
                    color: Colors.grey.shade400, offset: const Offset(-1, 0))
              ]),
        // child: Column(
        //     mainAxisAlignment: MainAxisAlignment.center,
        //     crossAxisAlignment: CrossAxisAlignment.start,
        //     children: [
        //       Text(
        //           '${snapshot.data[0].surname} ${snapshot.data[0].others}'
        //               .toUpperCase(),
        //           style: const TextStyle(
        //               color: Colors.black,
        //               fontSize: 18,
        //               fontWeight: FontWeight.w700)),
        //       const SizedBox(height: 5),
        //       Text('${snapshot.data[0].address}',
        //           style: const TextStyle(
        //             fontWeight: FontWeight.w400,
        //           )),
        //       const SizedBox(height: 5),
        //       Text('0${snapshot.data[0].number}'),
        //       const SizedBox(height: 5),
        //       Text('${snapshot.data[0].symptoms.split(',')}',
        //           style: const TextStyle(fontWeight: FontWeight.w200)),
        //     ]),
      ),
                      ),
                      // child: ListView.builder(
                      //     itemCount: snapshot.data.length,
                      //     itemBuilder: (context, index) {
                      //       print(
                      //           'index: $index, startingIndex: $startingIndex ');
                      //       return GestureDetector(
                      //           child: ReportView(
                      //               data: snapshot, index: (index)),
                      //           onTap: () {
                      //             Navigator.pushNamed(
                      //                 context, reportFullDetails,
                      //                 arguments: snapshot.data[(index)]);
                      //           });
                      //     }),
                    );
                  }
      
                  return const Center(child: CircularProgressIndicator());
                },
              ),
              const SizedBox(height: 30),
            ]
          ),
        ),
      ),
    );
  }
}

class ReportView extends StatelessWidget {
  final AsyncSnapshot data;
  final int index;

  const ReportView({
    Key? key,
    required this.data,
    required this.index,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    var collector = data.data;
    return Stack(children: [
      Container(
        padding: const EdgeInsets.all(5),
        margin: const EdgeInsets.symmetric(horizontal: 7, vertical: 5),
        width: MediaQuery.of(context).size.width,
        height: 140,
        decoration: BoxDecoration(
            color: Colors.grey.shade100,
            borderRadius: BorderRadius.circular(5),
            boxShadow: [
              BoxShadow(
                  color: Colors.grey.shade300, offset: const Offset(1, 1)),
              BoxShadow(
                  color: Colors.grey.shade400, offset: const Offset(0, 1)),
              BoxShadow(
                  color: Colors.grey.shade400, offset: const Offset(1, 0)),
              BoxShadow(
                  color: Colors.grey.shade400, offset: const Offset(-1, 0))
            ]),
        child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                  '${collector[index].surname} ${collector[index].others}'
                      .toUpperCase(),
                  style: const TextStyle(
                      color: Colors.black,
                      fontSize: 18,
                      fontWeight: FontWeight.w700)),
              const SizedBox(height: 5),
              Text('${collector[index].address}',
                  style: const TextStyle(
                    fontWeight: FontWeight.w400,
                  )),
              const SizedBox(height: 5),
              Text('0${collector[index].number}'),
              const SizedBox(height: 5),
              Text('${collector[index].symptoms.split(',')}',
                  style: const TextStyle(fontWeight: FontWeight.w200)),
            ]),
      ),
      Positioned(
        top: 13,
        right: 20,
        child: Container(
          width: 70,
          height: 30,
          decoration: BoxDecoration(
            color: Colors.red.shade500,
            borderRadius: BorderRadius.circular(15),
          ),
          child: Center(
            child: Text(
                (collector[index].type == 'self')
                    ? 'SelfReporting'
                    : 'Other-Report',
                style: TextStyle(
                    color: Colors.grey.shade200,
                    fontSize: 12,
                    shadows: const [
                      Shadow(color: Colors.white, offset: Offset(0, 0.5)),
                      Shadow(color: Colors.grey, offset: Offset(0.1, 0.6)),
                    ])),
          ),
        ),
      ),
    ]);








import 'dart:convert';
import 'dart:io';

import 'package:my_project/Models/json_formatter.dart';
import 'package:path_provider/path_provider.dart';

class FileManager {
  Future<String> get _directoryPath async {
    Directory? directory = await getExternalStorageDirectory();

    return directory!.path;
  }

  ///Tto get / create file from/to the directory

  Future<File> get _jsonFile async {
    // String newPath = '';
    final _path = await _directoryPath;
    // List<String> paths = _path.split('/');

    // for (int i = 1; i < paths.length; i++) {
    //   if (paths[i] != 'Android') {
    //     newPath += '/' + paths[i];
    //   } else {
    //     newPath += '/INReport';
    //     break;
    //   }
    // }
    // print(_path);
    return File('$_path/userList.json');
  }

  ///Creating the required methods to read and write into the file

  readJsonFile() async {
    String fileContent;

    File file = await _jsonFile;

    if (await file.exists()) {
      fileContent = await file.readAsString();
      // UserList a = (fileContent) as [];
      // print('fileContent: ${json.decode(fileContent)}');
      // print(fileContent.runtimeType);
      print('from manager:$fileContent');
      return json.decode(fileContent);
    }
  }

  writeJsonFile(User user) async {
    String fileContent;
      var usersList = UserList(users: <User>[]);

    File file = await _jsonFile;

    if (await file.exists()) {
      fileContent = await file.readAsString(); //String
    // _userList.add(User.fromJson(await FileManager().readJsonFile()));

      User user = User.fromJson(jsonDecode(fileContent));

      usersList.users.add(user);
      // print(user.userName);
      return usersList.users;
    }

    // final User user = User(userName: 'Adeola', password: 'Adeola123');
    // var result;
    // UserList results;
    // File file = await _jsonFile;
    // String fileString = await file.readAsString();
    // result = User.fromJson(json.decode(fileString));
    // results = UserList.fromJson(result);
    // results.users.add(user);
    // await file.writeAsString(json.encode(results.users));
    // print(results);
    // return results.users;
  }
}


SizedBox(
                              width: 130,
                              child: Form(
                                  key: _officerCommentKey,
                                  child: TextFormField(
                                    maxLines: 2,
                                    scrollPadding: const EdgeInsets.all(0),
                                    decoration: InputDecoration(
                                        border: OutlineInputBorder(
                                            borderSide: BorderSide(
                                                color: Colors.grey.shade400)),
                                        contentPadding: const EdgeInsets.only(
                                            top: 10, left: 10, bottom: 10),
                                        isDense: true,
                                        focusedBorder: OutlineInputBorder(
                                            borderSide: BorderSide(
                                          width: 1.5,
                                          color: Colors.grey.shade500,
                                        ))),
                                  ))),